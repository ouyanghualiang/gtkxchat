/* Generated by dbus-binding-tool; do not edit! */


#ifndef __dbus_glib_marshal_remote_object_MARSHAL_H__
#define __dbus_glib_marshal_remote_object_MARSHAL_H__

#include	<glib-object.h>

G_BEGIN_DECLS

#ifdef G_ENABLE_DEBUG
#define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
#define g_marshal_value_peek_char(v)     g_value_get_schar (v)
#define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
#define g_marshal_value_peek_int(v)      g_value_get_int (v)
#define g_marshal_value_peek_uint(v)     g_value_get_uint (v)
#define g_marshal_value_peek_long(v)     g_value_get_long (v)
#define g_marshal_value_peek_ulong(v)    g_value_get_ulong (v)
#define g_marshal_value_peek_int64(v)    g_value_get_int64 (v)
#define g_marshal_value_peek_uint64(v)   g_value_get_uint64 (v)
#define g_marshal_value_peek_enum(v)     g_value_get_enum (v)
#define g_marshal_value_peek_flags(v)    g_value_get_flags (v)
#define g_marshal_value_peek_float(v)    g_value_get_float (v)
#define g_marshal_value_peek_double(v)   g_value_get_double (v)
#define g_marshal_value_peek_string(v)   (char*) g_value_get_string (v)
#define g_marshal_value_peek_param(v)    g_value_get_param (v)
#define g_marshal_value_peek_boxed(v)    g_value_get_boxed (v)
#define g_marshal_value_peek_pointer(v)  g_value_get_pointer (v)
#define g_marshal_value_peek_object(v)   g_value_get_object (v)
#define g_marshal_value_peek_variant(v)  g_value_get_variant (v)
#else /* !G_ENABLE_DEBUG */
/* WARNING: This code accesses GValues directly, which is UNSUPPORTED API.
 *          Do not access GValues directly in your code. Instead, use the
 *          g_value_get_*() functions
 */
#define g_marshal_value_peek_boolean(v)  (v)->data[0].v_int
#define g_marshal_value_peek_char(v)     (v)->data[0].v_int
#define g_marshal_value_peek_uchar(v)    (v)->data[0].v_uint
#define g_marshal_value_peek_int(v)      (v)->data[0].v_int
#define g_marshal_value_peek_uint(v)     (v)->data[0].v_uint
#define g_marshal_value_peek_long(v)     (v)->data[0].v_long
#define g_marshal_value_peek_ulong(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_int64(v)    (v)->data[0].v_int64
#define g_marshal_value_peek_uint64(v)   (v)->data[0].v_uint64
#define g_marshal_value_peek_enum(v)     (v)->data[0].v_long
#define g_marshal_value_peek_flags(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_float(v)    (v)->data[0].v_float
#define g_marshal_value_peek_double(v)   (v)->data[0].v_double
#define g_marshal_value_peek_string(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_param(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_boxed(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_pointer(v)  (v)->data[0].v_pointer
#define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_variant(v)  (v)->data[0].v_pointer
#endif /* !G_ENABLE_DEBUG */


/* BOOLEAN:BOXED,INT,UCHAR,UCHAR,POINTER */
extern void dbus_glib_marshal_remote_object_BOOLEAN__BOXED_INT_UCHAR_UCHAR_POINTER (GClosure     *closure,
                                                                                    GValue       *return_value,
                                                                                    guint         n_param_values,
                                                                                    const GValue *param_values,
                                                                                    gpointer      invocation_hint,
                                                                                    gpointer      marshal_data);
void
dbus_glib_marshal_remote_object_BOOLEAN__BOXED_INT_UCHAR_UCHAR_POINTER (GClosure     *closure,
                                                                        GValue       *return_value G_GNUC_UNUSED,
                                                                        guint         n_param_values,
                                                                        const GValue *param_values,
                                                                        gpointer      invocation_hint G_GNUC_UNUSED,
                                                                        gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__BOXED_INT_UCHAR_UCHAR_POINTER) (gpointer     data1,
                                                                           gpointer     arg_1,
                                                                           gint         arg_2,
                                                                           guchar       arg_3,
                                                                           guchar       arg_4,
                                                                           gpointer     arg_5,
                                                                           gpointer     data2);
  register GMarshalFunc_BOOLEAN__BOXED_INT_UCHAR_UCHAR_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 6);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__BOXED_INT_UCHAR_UCHAR_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_boxed (param_values + 1),
                       g_marshal_value_peek_int (param_values + 2),
                       g_marshal_value_peek_uchar (param_values + 3),
                       g_marshal_value_peek_uchar (param_values + 4),
                       g_marshal_value_peek_pointer (param_values + 5),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,INT,STRING,INT,POINTER,POINTER */
extern void dbus_glib_marshal_remote_object_BOOLEAN__STRING_INT_STRING_INT_POINTER_POINTER (GClosure     *closure,
                                                                                            GValue       *return_value,
                                                                                            guint         n_param_values,
                                                                                            const GValue *param_values,
                                                                                            gpointer      invocation_hint,
                                                                                            gpointer      marshal_data);
void
dbus_glib_marshal_remote_object_BOOLEAN__STRING_INT_STRING_INT_POINTER_POINTER (GClosure     *closure,
                                                                                GValue       *return_value G_GNUC_UNUSED,
                                                                                guint         n_param_values,
                                                                                const GValue *param_values,
                                                                                gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_INT_STRING_INT_POINTER_POINTER) (gpointer     data1,
                                                                                   gpointer     arg_1,
                                                                                   gint         arg_2,
                                                                                   gpointer     arg_3,
                                                                                   gint         arg_4,
                                                                                   gpointer     arg_5,
                                                                                   gpointer     arg_6,
                                                                                   gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_INT_STRING_INT_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 7);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_INT_STRING_INT_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_int (param_values + 2),
                       g_marshal_value_peek_string (param_values + 3),
                       g_marshal_value_peek_int (param_values + 4),
                       g_marshal_value_peek_pointer (param_values + 5),
                       g_marshal_value_peek_pointer (param_values + 6),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,POINTER,POINTER,POINTER,POINTER */
extern void dbus_glib_marshal_remote_object_BOOLEAN__STRING_POINTER_POINTER_POINTER_POINTER (GClosure     *closure,
                                                                                             GValue       *return_value,
                                                                                             guint         n_param_values,
                                                                                             const GValue *param_values,
                                                                                             gpointer      invocation_hint,
                                                                                             gpointer      marshal_data);
void
dbus_glib_marshal_remote_object_BOOLEAN__STRING_POINTER_POINTER_POINTER_POINTER (GClosure     *closure,
                                                                                 GValue       *return_value G_GNUC_UNUSED,
                                                                                 guint         n_param_values,
                                                                                 const GValue *param_values,
                                                                                 gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                 gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_POINTER_POINTER_POINTER_POINTER) (gpointer     data1,
                                                                                    gpointer     arg_1,
                                                                                    gpointer     arg_2,
                                                                                    gpointer     arg_3,
                                                                                    gpointer     arg_4,
                                                                                    gpointer     arg_5,
                                                                                    gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_POINTER_POINTER_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 6);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_POINTER_POINTER_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       g_marshal_value_peek_pointer (param_values + 4),
                       g_marshal_value_peek_pointer (param_values + 5),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* NONE:POINTER */
#define dbus_glib_marshal_remote_object_VOID__POINTER	g_cclosure_marshal_VOID__POINTER
#define dbus_glib_marshal_remote_object_NONE__POINTER	dbus_glib_marshal_remote_object_VOID__POINTER

/* NONE:STRING,STRING,STRING,STRING,POINTER */
extern void dbus_glib_marshal_remote_object_VOID__STRING_STRING_STRING_STRING_POINTER (GClosure     *closure,
                                                                                       GValue       *return_value,
                                                                                       guint         n_param_values,
                                                                                       const GValue *param_values,
                                                                                       gpointer      invocation_hint,
                                                                                       gpointer      marshal_data);
void
dbus_glib_marshal_remote_object_VOID__STRING_STRING_STRING_STRING_POINTER (GClosure     *closure,
                                                                           GValue       *return_value G_GNUC_UNUSED,
                                                                           guint         n_param_values,
                                                                           const GValue *param_values,
                                                                           gpointer      invocation_hint G_GNUC_UNUSED,
                                                                           gpointer      marshal_data)
{
  typedef void (*GMarshalFunc_VOID__STRING_STRING_STRING_STRING_POINTER) (gpointer     data1,
                                                                          gpointer     arg_1,
                                                                          gpointer     arg_2,
                                                                          gpointer     arg_3,
                                                                          gpointer     arg_4,
                                                                          gpointer     arg_5,
                                                                          gpointer     data2);
  register GMarshalFunc_VOID__STRING_STRING_STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;

  g_return_if_fail (n_param_values == 6);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_VOID__STRING_STRING_STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  callback (data1,
            g_marshal_value_peek_string (param_values + 1),
            g_marshal_value_peek_string (param_values + 2),
            g_marshal_value_peek_string (param_values + 3),
            g_marshal_value_peek_string (param_values + 4),
            g_marshal_value_peek_pointer (param_values + 5),
            data2);
}
#define dbus_glib_marshal_remote_object_NONE__STRING_STRING_STRING_STRING_POINTER	dbus_glib_marshal_remote_object_VOID__STRING_STRING_STRING_STRING_POINTER

/* BOOLEAN:STRING,POINTER,POINTER */
extern void dbus_glib_marshal_remote_object_BOOLEAN__STRING_POINTER_POINTER (GClosure     *closure,
                                                                             GValue       *return_value,
                                                                             guint         n_param_values,
                                                                             const GValue *param_values,
                                                                             gpointer      invocation_hint,
                                                                             gpointer      marshal_data);
void
dbus_glib_marshal_remote_object_BOOLEAN__STRING_POINTER_POINTER (GClosure     *closure,
                                                                 GValue       *return_value G_GNUC_UNUSED,
                                                                 guint         n_param_values,
                                                                 const GValue *param_values,
                                                                 gpointer      invocation_hint G_GNUC_UNUSED,
                                                                 gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_POINTER_POINTER) (gpointer     data1,
                                                                    gpointer     arg_1,
                                                                    gpointer     arg_2,
                                                                    gpointer     arg_3,
                                                                    gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:POINTER,POINTER */
extern void dbus_glib_marshal_remote_object_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                                      GValue       *return_value,
                                                                      guint         n_param_values,
                                                                      const GValue *param_values,
                                                                      gpointer      invocation_hint,
                                                                      gpointer      marshal_data);
void
dbus_glib_marshal_remote_object_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                          GValue       *return_value G_GNUC_UNUSED,
                                                          guint         n_param_values,
                                                          const GValue *param_values,
                                                          gpointer      invocation_hint G_GNUC_UNUSED,
                                                          gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__POINTER_POINTER) (gpointer     data1,
                                                             gpointer     arg_1,
                                                             gpointer     arg_2,
                                                             gpointer     data2);
  register GMarshalFunc_BOOLEAN__POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_pointer (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,BOXED,POINTER,POINTER */
extern void dbus_glib_marshal_remote_object_BOOLEAN__STRING_BOXED_POINTER_POINTER (GClosure     *closure,
                                                                                   GValue       *return_value,
                                                                                   guint         n_param_values,
                                                                                   const GValue *param_values,
                                                                                   gpointer      invocation_hint,
                                                                                   gpointer      marshal_data);
void
dbus_glib_marshal_remote_object_BOOLEAN__STRING_BOXED_POINTER_POINTER (GClosure     *closure,
                                                                       GValue       *return_value G_GNUC_UNUSED,
                                                                       guint         n_param_values,
                                                                       const GValue *param_values,
                                                                       gpointer      invocation_hint G_GNUC_UNUSED,
                                                                       gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_BOXED_POINTER_POINTER) (gpointer     data1,
                                                                          gpointer     arg_1,
                                                                          gpointer     arg_2,
                                                                          gpointer     arg_3,
                                                                          gpointer     arg_4,
                                                                          gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_BOXED_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 5);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_BOXED_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_boxed (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       g_marshal_value_peek_pointer (param_values + 4),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,STRING,POINTER,POINTER */
extern void dbus_glib_marshal_remote_object_BOOLEAN__STRING_STRING_POINTER_POINTER (GClosure     *closure,
                                                                                    GValue       *return_value,
                                                                                    guint         n_param_values,
                                                                                    const GValue *param_values,
                                                                                    gpointer      invocation_hint,
                                                                                    gpointer      marshal_data);
void
dbus_glib_marshal_remote_object_BOOLEAN__STRING_STRING_POINTER_POINTER (GClosure     *closure,
                                                                        GValue       *return_value G_GNUC_UNUSED,
                                                                        guint         n_param_values,
                                                                        const GValue *param_values,
                                                                        gpointer      invocation_hint G_GNUC_UNUSED,
                                                                        gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_STRING_POINTER_POINTER) (gpointer     data1,
                                                                           gpointer     arg_1,
                                                                           gpointer     arg_2,
                                                                           gpointer     arg_3,
                                                                           gpointer     arg_4,
                                                                           gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_STRING_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 5);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_STRING_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_string (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       g_marshal_value_peek_pointer (param_values + 4),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:UINT,POINTER */
extern void dbus_glib_marshal_remote_object_BOOLEAN__UINT_POINTER (GClosure     *closure,
                                                                   GValue       *return_value,
                                                                   guint         n_param_values,
                                                                   const GValue *param_values,
                                                                   gpointer      invocation_hint,
                                                                   gpointer      marshal_data);
void
dbus_glib_marshal_remote_object_BOOLEAN__UINT_POINTER (GClosure     *closure,
                                                       GValue       *return_value G_GNUC_UNUSED,
                                                       guint         n_param_values,
                                                       const GValue *param_values,
                                                       gpointer      invocation_hint G_GNUC_UNUSED,
                                                       gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__UINT_POINTER) (gpointer     data1,
                                                          guint        arg_1,
                                                          gpointer     arg_2,
                                                          gpointer     data2);
  register GMarshalFunc_BOOLEAN__UINT_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__UINT_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_uint (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,INT,INT,POINTER,POINTER */
extern void dbus_glib_marshal_remote_object_BOOLEAN__STRING_INT_INT_POINTER_POINTER (GClosure     *closure,
                                                                                     GValue       *return_value,
                                                                                     guint         n_param_values,
                                                                                     const GValue *param_values,
                                                                                     gpointer      invocation_hint,
                                                                                     gpointer      marshal_data);
void
dbus_glib_marshal_remote_object_BOOLEAN__STRING_INT_INT_POINTER_POINTER (GClosure     *closure,
                                                                         GValue       *return_value G_GNUC_UNUSED,
                                                                         guint         n_param_values,
                                                                         const GValue *param_values,
                                                                         gpointer      invocation_hint G_GNUC_UNUSED,
                                                                         gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_INT_INT_POINTER_POINTER) (gpointer     data1,
                                                                            gpointer     arg_1,
                                                                            gint         arg_2,
                                                                            gint         arg_3,
                                                                            gpointer     arg_4,
                                                                            gpointer     arg_5,
                                                                            gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_INT_INT_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 6);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_INT_INT_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_int (param_values + 2),
                       g_marshal_value_peek_int (param_values + 3),
                       g_marshal_value_peek_pointer (param_values + 4),
                       g_marshal_value_peek_pointer (param_values + 5),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,POINTER */
extern void dbus_glib_marshal_remote_object_BOOLEAN__STRING_POINTER (GClosure     *closure,
                                                                     GValue       *return_value,
                                                                     guint         n_param_values,
                                                                     const GValue *param_values,
                                                                     gpointer      invocation_hint,
                                                                     gpointer      marshal_data);
void
dbus_glib_marshal_remote_object_BOOLEAN__STRING_POINTER (GClosure     *closure,
                                                         GValue       *return_value G_GNUC_UNUSED,
                                                         guint         n_param_values,
                                                         const GValue *param_values,
                                                         gpointer      invocation_hint G_GNUC_UNUSED,
                                                         gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_POINTER) (gpointer     data1,
                                                            gpointer     arg_1,
                                                            gpointer     arg_2,
                                                            gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:UINT,STRING,POINTER,POINTER */
extern void dbus_glib_marshal_remote_object_BOOLEAN__UINT_STRING_POINTER_POINTER (GClosure     *closure,
                                                                                  GValue       *return_value,
                                                                                  guint         n_param_values,
                                                                                  const GValue *param_values,
                                                                                  gpointer      invocation_hint,
                                                                                  gpointer      marshal_data);
void
dbus_glib_marshal_remote_object_BOOLEAN__UINT_STRING_POINTER_POINTER (GClosure     *closure,
                                                                      GValue       *return_value G_GNUC_UNUSED,
                                                                      guint         n_param_values,
                                                                      const GValue *param_values,
                                                                      gpointer      invocation_hint G_GNUC_UNUSED,
                                                                      gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__UINT_STRING_POINTER_POINTER) (gpointer     data1,
                                                                         guint        arg_1,
                                                                         gpointer     arg_2,
                                                                         gpointer     arg_3,
                                                                         gpointer     arg_4,
                                                                         gpointer     data2);
  register GMarshalFunc_BOOLEAN__UINT_STRING_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 5);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__UINT_STRING_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_uint (param_values + 1),
                       g_marshal_value_peek_string (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       g_marshal_value_peek_pointer (param_values + 4),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:UINT,POINTER,POINTER */
extern void dbus_glib_marshal_remote_object_BOOLEAN__UINT_POINTER_POINTER (GClosure     *closure,
                                                                           GValue       *return_value,
                                                                           guint         n_param_values,
                                                                           const GValue *param_values,
                                                                           gpointer      invocation_hint,
                                                                           gpointer      marshal_data);
void
dbus_glib_marshal_remote_object_BOOLEAN__UINT_POINTER_POINTER (GClosure     *closure,
                                                               GValue       *return_value G_GNUC_UNUSED,
                                                               guint         n_param_values,
                                                               const GValue *param_values,
                                                               gpointer      invocation_hint G_GNUC_UNUSED,
                                                               gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__UINT_POINTER_POINTER) (gpointer     data1,
                                                                  guint        arg_1,
                                                                  gpointer     arg_2,
                                                                  gpointer     arg_3,
                                                                  gpointer     data2);
  register GMarshalFunc_BOOLEAN__UINT_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__UINT_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_uint (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

G_END_DECLS

#endif /* __dbus_glib_marshal_remote_object_MARSHAL_H__ */

#include <dbus/dbus-glib.h>
static const DBusGMethodInfo dbus_glib_remote_object_methods[] = {
  { (GCallback) remote_object_connect, dbus_glib_marshal_remote_object_NONE__STRING_STRING_STRING_STRING_POINTER, 0 },
  { (GCallback) remote_object_disconnect, dbus_glib_marshal_remote_object_NONE__POINTER, 90 },
  { (GCallback) remote_object_command, dbus_glib_marshal_remote_object_BOOLEAN__STRING_POINTER, 127 },
  { (GCallback) remote_object_print, dbus_glib_marshal_remote_object_BOOLEAN__STRING_POINTER, 169 },
  { (GCallback) remote_object_find_context, dbus_glib_marshal_remote_object_BOOLEAN__STRING_STRING_POINTER_POINTER, 206 },
  { (GCallback) remote_object_get_context, dbus_glib_marshal_remote_object_BOOLEAN__POINTER_POINTER, 278 },
  { (GCallback) remote_object_set_context, dbus_glib_marshal_remote_object_BOOLEAN__UINT_POINTER_POINTER, 326 },
  { (GCallback) remote_object_get_info, dbus_glib_marshal_remote_object_BOOLEAN__STRING_POINTER_POINTER, 378 },
  { (GCallback) remote_object_get_prefs, dbus_glib_marshal_remote_object_BOOLEAN__STRING_POINTER_POINTER_POINTER_POINTER, 432 },
  { (GCallback) remote_object_hook_command, dbus_glib_marshal_remote_object_BOOLEAN__STRING_INT_STRING_INT_POINTER_POINTER, 521 },
  { (GCallback) remote_object_hook_server, dbus_glib_marshal_remote_object_BOOLEAN__STRING_INT_INT_POINTER_POINTER, 623 },
  { (GCallback) remote_object_hook_print, dbus_glib_marshal_remote_object_BOOLEAN__STRING_INT_INT_POINTER_POINTER, 710 },
  { (GCallback) remote_object_unhook, dbus_glib_marshal_remote_object_BOOLEAN__UINT_POINTER, 796 },
  { (GCallback) remote_object_list_get, dbus_glib_marshal_remote_object_BOOLEAN__STRING_POINTER_POINTER, 832 },
  { (GCallback) remote_object_list_next, dbus_glib_marshal_remote_object_BOOLEAN__UINT_POINTER_POINTER, 886 },
  { (GCallback) remote_object_list_str, dbus_glib_marshal_remote_object_BOOLEAN__UINT_STRING_POINTER_POINTER, 936 },
  { (GCallback) remote_object_list_int, dbus_glib_marshal_remote_object_BOOLEAN__UINT_STRING_POINTER_POINTER, 998 },
  { (GCallback) remote_object_list_time, dbus_glib_marshal_remote_object_BOOLEAN__UINT_STRING_POINTER_POINTER, 1060 },
  { (GCallback) remote_object_list_fields, dbus_glib_marshal_remote_object_BOOLEAN__STRING_POINTER_POINTER, 1124 },
  { (GCallback) remote_object_list_free, dbus_glib_marshal_remote_object_BOOLEAN__UINT_POINTER, 1179 },
  { (GCallback) remote_object_emit_print, dbus_glib_marshal_remote_object_BOOLEAN__STRING_BOXED_POINTER_POINTER, 1217 },
  { (GCallback) remote_object_nickcmp, dbus_glib_marshal_remote_object_BOOLEAN__STRING_STRING_POINTER_POINTER, 1286 },
  { (GCallback) remote_object_strip, dbus_glib_marshal_remote_object_BOOLEAN__STRING_INT_INT_POINTER_POINTER, 1348 },
  { (GCallback) remote_object_send_modes, dbus_glib_marshal_remote_object_BOOLEAN__BOXED_INT_UCHAR_UCHAR_POINTER, 1417 },
};

const DBusGObjectInfo dbus_glib_remote_object_object_info = {  1,
  dbus_glib_remote_object_methods,
  24,
"org.hexchat.connection\0Connect\0A\0filename\0I\0s\0name\0I\0s\0desc\0I\0s\0version\0I\0s\0path\0O\0F\0N\0s\0\0org.hexchat.connection\0Disconnect\0A\0\0org.hexchat.plugin\0Command\0S\0command\0I\0s\0\0org.hexchat.plugin\0Print\0S\0text\0I\0s\0\0org.hexchat.plugin\0FindContext\0S\0server\0I\0s\0channel\0I\0s\0ret_id\0O\0F\0N\0u\0\0org.hexchat.plugin\0GetContext\0S\0ret_id\0O\0F\0N\0u\0\0org.hexchat.plugin\0SetContext\0S\0id\0I\0u\0ret\0O\0F\0N\0b\0\0org.hexchat.plugin\0GetInfo\0S\0id\0I\0s\0ret_info\0O\0F\0N\0s\0\0org.hexchat.plugin\0GetPrefs\0S\0name\0I\0s\0ret_type\0O\0F\0N\0i\0ret_str\0O\0F\0N\0s\0ret_int\0O\0F\0N\0i\0\0org.hexchat.plugin\0HookCommand\0S\0name\0I\0s\0priority\0I\0i\0help_text\0I\0s\0return_value\0I\0i\0ret_id\0O\0F\0N\0u\0\0org.hexchat.plugin\0HookServer\0S\0name\0I\0s\0priority\0I\0i\0return_value\0I\0i\0ret_id\0O\0F\0N\0u\0\0org.hexchat.plugin\0HookPrint\0S\0name\0I\0s\0priority\0I\0i\0return_value\0I\0i\0ret_id\0O\0F\0N\0u\0\0org.hexchat.plugin\0Unhook\0S\0id\0I\0u\0\0org.hexchat.plugin\0ListGet\0S\0name\0I\0s\0ret_id\0O\0F\0N\0u\0\0org.hexchat.plugin\0ListNext\0S\0id\0I\0u\0ret\0O\0F\0N\0b\0\0org.hexchat.plugin\0ListStr\0S\0id\0I\0u\0name\0I\0s\0ret_str\0O\0F\0N\0s\0\0org.hexchat.plugin\0ListInt\0S\0id\0I\0u\0name\0I\0s\0ret_int\0O\0F\0N\0i\0\0org.hexchat.plugin\0ListTime\0S\0id\0I\0u\0name\0I\0s\0ret_time\0O\0F\0N\0t\0\0org.hexchat.plugin\0ListFields\0S\0name\0I\0s\0ret\0O\0F\0N\0as\0\0org.hexchat.plugin\0ListFree\0S\0id\0I\0u\0\0org.hexchat.plugin\0EmitPrint\0S\0event_name\0I\0s\0args\0I\0as\0ret\0O\0F\0N\0b\0\0org.hexchat.plugin\0Nickcmp\0S\0nick1\0I\0s\0nick2\0I\0s\0ret\0O\0F\0N\0i\0\0org.hexchat.plugin\0Strip\0S\0str\0I\0s\0len\0I\0i\0flag\0I\0i\0ret_str\0O\0F\0N\0s\0\0org.hexchat.plugin\0SendModes\0S\0targets\0I\0as\0modes_per_line\0I\0i\0sign\0I\0y\0mode\0I\0y\0\0\0",
"org.hexchat.plugin\0CommandSignal\0org.hexchat.plugin\0ServerSignal\0org.hexchat.plugin\0PrintSignal\0org.hexchat.plugin\0UnloadSignal\0\0",
"\0"
};

